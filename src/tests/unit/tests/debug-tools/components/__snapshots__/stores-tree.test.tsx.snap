// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StoresTree renders each row properly 1`] = `
<ForwardRef(StyledDetailsRowBase)
  columns={
    [
      {
        "fieldName": "key",
        "key": "key",
        "minWidth": 300,
        "name": "property",
      },
      {
        "fieldName": "value",
        "key": "value",
        "minWidth": 300,
        "name": "value",
        "onRender": [Function],
      },
    ]
  }
  compact={true}
  groupNestingDepth={0}
  item={
    {
      "key": "value",
    }
  }
  itemIndex={1}
  selection={
    Selection {
      "_change": [MockFunction],
      "_setAllSelected": [MockFunction],
      "_updateCount": [MockFunction],
      "canSelectItem": [MockFunction],
      "getItemIndex": [MockFunction],
      "getItems": [MockFunction],
      "getKey": [MockFunction],
      "getSelectedCount": [MockFunction],
      "getSelectedIndices": [MockFunction],
      "getSelection": [MockFunction],
      "isAllSelected": [MockFunction],
      "isIndexSelected": [MockFunction],
      "isKeySelected": [MockFunction],
      "isModal": [MockFunction],
      "isRangeSelected": [MockFunction],
      "selectToIndex": [MockFunction],
      "selectToKey": [MockFunction],
      "selectToRange": [MockFunction],
      "setAllSelected": [MockFunction],
      "setChangeEvents": [MockFunction],
      "setIndexSelected": [MockFunction],
      "setItems": [MockFunction],
      "setKeySelected": [MockFunction],
      "setModal": [MockFunction],
      "setRangeSelected": [MockFunction],
      "toggleAllSelected": [MockFunction],
      "toggleIndexSelected": [MockFunction],
      "toggleKeySelected": [MockFunction],
      "toggleRangeSelected": [MockFunction],
    }
  }
  selectionMode={0}
/>
`;

exports[`StoresTree renders the value column properly 1`] = `"{"first":1,"second":"2","third":true,"fourth":[4],"fifth":{"sixth":"6"}}"`;

exports[`StoresTree renders with no data from the state 1`] = `
<DocumentFragment>
  <mock-styledspinnerbase
    label="loading..."
  />
</DocumentFragment>
`;

exports[`StoresTree renders with proper data from the stores 1`] = `
<DocumentFragment>
  <mock-focuszone
    data-tabster="{"uncontrolled": {}}"
    direction="2"
    iscircularnavigation="false"
    shouldraiseclicks="true"
  >
    <mock-selectionzone
      isselectedonfocus="true"
      selection="[object Object]"
      selectionclearedonescapepress="true"
      selectionmode="0"
      togglewithoutmodifierpressed="false"
    >
      <mock-styledgroupedlistbase
        compact="true"
        groups="[object Object],[object Object]"
        items="[object Object],[object Object],[object Object]"
        selection="[object Object]"
        selectionmode="0"
      />
    </mock-selectionzone>
  </mock-focuszone>
</DocumentFragment>
`;

exports[`StoresTree renders with proper data from the stores: FocusZone props 1`] = `
{
  "children": <SelectionZone
    isSelectedOnFocus={true}
    selection={
      Selection {
        "_change": [MockFunction],
        "_setAllSelected": [MockFunction],
        "_updateCount": [MockFunction],
        "canSelectItem": [MockFunction],
        "getItemIndex": [MockFunction],
        "getItems": [MockFunction],
        "getKey": [MockFunction],
        "getSelectedCount": [MockFunction],
        "getSelectedIndices": [MockFunction],
        "getSelection": [MockFunction],
        "isAllSelected": [MockFunction],
        "isIndexSelected": [MockFunction],
        "isKeySelected": [MockFunction],
        "isModal": [MockFunction],
        "isRangeSelected": [MockFunction],
        "selectToIndex": [MockFunction],
        "selectToKey": [MockFunction],
        "selectToRange": [MockFunction],
        "setAllSelected": [MockFunction],
        "setChangeEvents": [MockFunction],
        "setIndexSelected": [MockFunction],
        "setItems": [MockFunction],
        "setKeySelected": [MockFunction],
        "setModal": [MockFunction],
        "setRangeSelected": [MockFunction],
        "toggleAllSelected": [MockFunction],
        "toggleIndexSelected": [MockFunction],
        "toggleKeySelected": [MockFunction],
        "toggleRangeSelected": [MockFunction],
      }
    }
    selectionClearedOnEscapePress={true}
    selectionMode={0}
    toggleWithoutModifierPressed={false}
  >
    <ForwardRef(StyledGroupedListBase)
      compact={true}
      groups={
        [
          {
            "count": 2,
            "key": "userConfigurationStoreData",
            "name": "userConfigurationStoreData",
            "startIndex": 0,
          },
          {
            "count": 1,
            "key": "permissionsStateStoreData",
            "name": "permissionsStateStoreData",
            "startIndex": 2,
          },
        ]
      }
      items={
        [
          {
            "key": "enableTelemetry",
            "value": true,
          },
          {
            "key": "isFirstTime",
            "value": false,
          },
          {
            "key": "hasAllUrlAndFilePermissions",
            "value": true,
          },
        ]
      }
      onRenderCell={[Function]}
      selection={
        Selection {
          "_change": [MockFunction],
          "_setAllSelected": [MockFunction],
          "_updateCount": [MockFunction],
          "canSelectItem": [MockFunction],
          "getItemIndex": [MockFunction],
          "getItems": [MockFunction],
          "getKey": [MockFunction],
          "getSelectedCount": [MockFunction],
          "getSelectedIndices": [MockFunction],
          "getSelection": [MockFunction],
          "isAllSelected": [MockFunction],
          "isIndexSelected": [MockFunction],
          "isKeySelected": [MockFunction],
          "isModal": [MockFunction],
          "isRangeSelected": [MockFunction],
          "selectToIndex": [MockFunction],
          "selectToKey": [MockFunction],
          "selectToRange": [MockFunction],
          "setAllSelected": [MockFunction],
          "setChangeEvents": [MockFunction],
          "setIndexSelected": [MockFunction],
          "setItems": [MockFunction],
          "setKeySelected": [MockFunction],
          "setModal": [MockFunction],
          "setRangeSelected": [MockFunction],
          "toggleAllSelected": [MockFunction],
          "toggleIndexSelected": [MockFunction],
          "toggleKeySelected": [MockFunction],
          "toggleRangeSelected": [MockFunction],
        }
      }
      selectionMode={0}
    />
  </SelectionZone>,
  "data-tabster": "{"uncontrolled": {}}",
  "direction": 2,
  "isCircularNavigation": false,
  "shouldRaiseClicks": true,
}
`;
