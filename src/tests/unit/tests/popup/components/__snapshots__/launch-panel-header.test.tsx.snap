// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LaunchPanelHeaderTest renders 1`] = `
<DocumentFragment>
  <mock-header
    subtitle="test subtitle"
    title="test title"
  >
    <mock-flaggedcomponent
      enablejsxelement="[object Object]"
      featureflag="debugTools"
      featureflagstoredata="[object Object]"
    />
    <mock-gearoptionsbuttoncomponent
      deps="[object Object]"
      featureflagdata="[object Object]"
    />
    <mock-hamburgermenubutton
      deps="[object Object]"
      header="[object Object]"
      popupwindow="[object Object]"
    />
  </mock-header>
</DocumentFragment>
`;

exports[`LaunchPanelHeaderTest renders: FlaggedComponent props 1`] = `
{
  "enableJSXElement": <CustomizedIconButton
    ariaLabel="open debug tools"
    iconProps={
      {
        "iconName": "Cat",
      }
    }
  />,
  "featureFlag": "debugTools",
  "featureFlagStoreData": {},
}
`;

exports[`LaunchPanelHeaderTest renders: GearOptionsButtonComponent props 1`] = `
{
  "deps": {
    "dropdownClickHandler": {},
    "launchPanelHeaderClickHandler": {},
    "popupActionMessageCreator": {},
  },
  "featureFlagData": {},
}
`;

exports[`LaunchPanelHeaderTest renders: HamburgerMenuButton props 1`] = `
{
  "deps": {
    "dropdownClickHandler": {},
    "launchPanelHeaderClickHandler": {},
    "popupActionMessageCreator": {},
  },
  "header": LaunchPanelHeader {
    "_reactInternalInstance": {},
    "_reactInternals": FiberNode {
      "_debugHookTypes": null,
      "_debugNeedsRemount": false,
      "_debugOwner": null,
      "_debugSource": null,
      "actualDuration": 0,
      "actualStartTime": -1,
      "alternate": null,
      "child": FiberNode {
        "_debugHookTypes": null,
        "_debugNeedsRemount": false,
        "_debugOwner": [Circular],
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugHookTypes": null,
          "_debugNeedsRemount": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugHookTypes": null,
            "_debugNeedsRemount": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugHookTypes": null,
              "_debugNeedsRemount": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": null,
              "childLanes": 0,
              "deletions": null,
              "dependencies": null,
              "elementType": "mock-FlaggedComponent",
              "flags": 0,
              "index": 0,
              "key": null,
              "lanes": 0,
              "memoizedProps": {
                "children": undefined,
                "enableJSXElement": <CustomizedIconButton
                  ariaLabel="open debug tools"
                  iconProps={
                    {
                      "iconName": "Cat",
                    }
                  }
                />,
                "featureFlag": "debugTools",
                "featureFlagStoreData": {},
              },
              "memoizedState": null,
              "mode": 1,
              "pendingProps": {
                "children": undefined,
                "enableJSXElement": <CustomizedIconButton
                  ariaLabel="open debug tools"
                  iconProps={
                    {
                      "iconName": "Cat",
                    }
                  }
                />,
                "featureFlag": "debugTools",
                "featureFlagStoreData": {},
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <mock-flaggedcomponent
                enablejsxelement="[object Object]"
                featureflag="debugTools"
                featureflagstoredata="[object Object]"
              />,
              "subtreeFlags": 0,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "mock-FlaggedComponent",
              "updateQueue": null,
            },
            "childLanes": 0,
            "deletions": null,
            "dependencies": null,
            "elementType": [MockFunction] {
              "calls": [
                [
                  {
                    "enableJSXElement": <CustomizedIconButton
                      ariaLabel="open debug tools"
                      iconProps={
                        {
                          "iconName": "Cat",
                        }
                      }
                    />,
                    "featureFlag": "debugTools",
                    "featureFlagStoreData": {},
                  },
                  {},
                ],
              ],
              "results": [
                {
                  "type": "return",
                  "value": {
                    "_reactInternalInstance": {},
                    "_reactInternals": [Circular],
                    "context": {},
                    "props": {
                      "enableJSXElement": <CustomizedIconButton
                        ariaLabel="open debug tools"
                        iconProps={
                          {
                            "iconName": "Cat",
                          }
                        }
                      />,
                      "featureFlag": "debugTools",
                      "featureFlagStoreData": {},
                    },
                    "refs": {},
                    "render": [Function],
                    "state": null,
                    "updater": {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                },
              ],
            },
            "flags": 1048577,
            "index": 0,
            "key": null,
            "lanes": 0,
            "memoizedProps": {
              "enableJSXElement": <CustomizedIconButton
                ariaLabel="open debug tools"
                iconProps={
                  {
                    "iconName": "Cat",
                  }
                }
              />,
              "featureFlag": "debugTools",
              "featureFlagStoreData": {},
            },
            "memoizedState": null,
            "mode": 1,
            "pendingProps": {
              "enableJSXElement": <CustomizedIconButton
                ariaLabel="open debug tools"
                iconProps={
                  {
                    "iconName": "Cat",
                  }
                }
              />,
              "featureFlag": "debugTools",
              "featureFlagStoreData": {},
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": FiberNode {
              "_debugHookTypes": null,
              "_debugNeedsRemount": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugHookTypes": null,
                "_debugNeedsRemount": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childLanes": 0,
                "deletions": null,
                "dependencies": null,
                "elementType": "mock-GearOptionsButtonComponent",
                "flags": 0,
                "index": 0,
                "key": null,
                "lanes": 0,
                "memoizedProps": {
                  "children": undefined,
                  "deps": {
                    "dropdownClickHandler": {},
                    "launchPanelHeaderClickHandler": {},
                    "popupActionMessageCreator": {},
                  },
                  "featureFlagData": {},
                },
                "memoizedState": null,
                "mode": 1,
                "pendingProps": {
                  "children": undefined,
                  "deps": {
                    "dropdownClickHandler": {},
                    "launchPanelHeaderClickHandler": {},
                    "popupActionMessageCreator": {},
                  },
                  "featureFlagData": {},
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <mock-gearoptionsbuttoncomponent
                  deps="[object Object]"
                  featureflagdata="[object Object]"
                />,
                "subtreeFlags": 0,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "mock-GearOptionsButtonComponent",
                "updateQueue": null,
              },
              "childLanes": 0,
              "deletions": null,
              "dependencies": null,
              "elementType": [MockFunction] {
                "calls": [
                  [
                    {
                      "deps": {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      },
                      "featureFlagData": {},
                    },
                    {},
                  ],
                ],
                "results": [
                  {
                    "type": "return",
                    "value": <mock-GearOptionsButtonComponent
                      deps={
                        {
                          "dropdownClickHandler": {},
                          "launchPanelHeaderClickHandler": {},
                          "popupActionMessageCreator": {},
                        }
                      }
                      featureFlagData={{}}
                    />,
                  },
                ],
              },
              "flags": 1048577,
              "index": 1,
              "key": null,
              "lanes": 0,
              "memoizedProps": {
                "deps": {
                  "dropdownClickHandler": {},
                  "launchPanelHeaderClickHandler": {},
                  "popupActionMessageCreator": {},
                },
                "featureFlagData": {},
              },
              "memoizedState": null,
              "mode": 1,
              "pendingProps": {
                "deps": {
                  "dropdownClickHandler": {},
                  "launchPanelHeaderClickHandler": {},
                  "popupActionMessageCreator": {},
                },
                "featureFlagData": {},
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugHookTypes": null,
                "_debugNeedsRemount": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugHookTypes": null,
                  "_debugNeedsRemount": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childLanes": 0,
                  "deletions": null,
                  "dependencies": null,
                  "elementType": "mock-HamburgerMenuButton",
                  "flags": 0,
                  "index": 0,
                  "key": null,
                  "lanes": 0,
                  "memoizedProps": {
                    "children": undefined,
                    "deps": {
                      "dropdownClickHandler": {},
                      "launchPanelHeaderClickHandler": {},
                      "popupActionMessageCreator": {},
                    },
                    "header": [Circular],
                    "popupWindow": {},
                  },
                  "memoizedState": null,
                  "mode": 1,
                  "pendingProps": {
                    "children": undefined,
                    "deps": {
                      "dropdownClickHandler": {},
                      "launchPanelHeaderClickHandler": {},
                      "popupActionMessageCreator": {},
                    },
                    "header": [Circular],
                    "popupWindow": {},
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <mock-hamburgermenubutton
                    deps="[object Object]"
                    header="[object Object]"
                    popupwindow="[object Object]"
                  />,
                  "subtreeFlags": 0,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "mock-HamburgerMenuButton",
                  "updateQueue": null,
                },
                "childLanes": 0,
                "deletions": null,
                "dependencies": null,
                "elementType": [MockFunction] {
                  "calls": [
                    [
                      [Circular],
                      {},
                    ],
                  ],
                  "results": [
                    {
                      "type": "return",
                      "value": <mock-HamburgerMenuButton
                        deps={
                          {
                            "dropdownClickHandler": {},
                            "launchPanelHeaderClickHandler": {},
                            "popupActionMessageCreator": {},
                          }
                        }
                        header={[Circular]}
                        popupWindow={{}}
                      />,
                    },
                  ],
                },
                "flags": 1048577,
                "index": 2,
                "key": null,
                "lanes": 0,
                "memoizedProps": [Circular],
                "memoizedState": null,
                "mode": 1,
                "pendingProps": [Circular],
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "subtreeFlags": 0,
                "tag": 0,
                "treeBaseDuration": 0,
                "type": [MockFunction] {
                  "calls": [
                    [
                      [Circular],
                      {},
                    ],
                  ],
                  "results": [
                    {
                      "type": "return",
                      "value": <mock-HamburgerMenuButton
                        deps={
                          {
                            "dropdownClickHandler": {},
                            "launchPanelHeaderClickHandler": {},
                            "popupActionMessageCreator": {},
                          }
                        }
                        header={[Circular]}
                        popupWindow={{}}
                      />,
                    },
                  ],
                },
                "updateQueue": null,
              },
              "stateNode": null,
              "subtreeFlags": 0,
              "tag": 0,
              "treeBaseDuration": 0,
              "type": [MockFunction] {
                "calls": [
                  [
                    {
                      "deps": {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      },
                      "featureFlagData": {},
                    },
                    {},
                  ],
                ],
                "results": [
                  {
                    "type": "return",
                    "value": <mock-GearOptionsButtonComponent
                      deps={
                        {
                          "dropdownClickHandler": {},
                          "launchPanelHeaderClickHandler": {},
                          "popupActionMessageCreator": {},
                        }
                      }
                      featureFlagData={{}}
                    />,
                  },
                ],
              },
              "updateQueue": null,
            },
            "stateNode": {
              "_reactInternalInstance": {},
              "_reactInternals": [Circular],
              "context": {},
              "props": {
                "enableJSXElement": <CustomizedIconButton
                  ariaLabel="open debug tools"
                  iconProps={
                    {
                      "iconName": "Cat",
                    }
                  }
                />,
                "featureFlag": "debugTools",
                "featureFlagStoreData": {},
              },
              "refs": {},
              "render": [Function],
              "state": null,
              "updater": {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "subtreeFlags": 0,
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [MockFunction] {
              "calls": [
                [
                  {
                    "enableJSXElement": <CustomizedIconButton
                      ariaLabel="open debug tools"
                      iconProps={
                        {
                          "iconName": "Cat",
                        }
                      }
                    />,
                    "featureFlag": "debugTools",
                    "featureFlagStoreData": {},
                  },
                  {},
                ],
              ],
              "results": [
                {
                  "type": "return",
                  "value": {
                    "_reactInternalInstance": {},
                    "_reactInternals": [Circular],
                    "context": {},
                    "props": {
                      "enableJSXElement": <CustomizedIconButton
                        ariaLabel="open debug tools"
                        iconProps={
                          {
                            "iconName": "Cat",
                          }
                        }
                      />,
                      "featureFlag": "debugTools",
                      "featureFlagStoreData": {},
                    },
                    "refs": {},
                    "render": [Function],
                    "state": null,
                    "updater": {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                },
              ],
            },
            "updateQueue": {
              "baseState": null,
              "effects": null,
              "firstBaseUpdate": null,
              "lastBaseUpdate": null,
              "shared": {
                "interleaved": null,
                "lanes": 0,
                "pending": null,
              },
            },
          },
          "childLanes": 0,
          "deletions": null,
          "dependencies": null,
          "elementType": "mock-Header",
          "flags": 0,
          "index": 0,
          "key": null,
          "lanes": 0,
          "memoizedProps": {
            "children": <React.Fragment>
              <FlaggedComponent
                enableJSXElement={
                  <CustomizedIconButton
                    ariaLabel="open debug tools"
                    iconProps={
                      {
                        "iconName": "Cat",
                      }
                    }
                  />
                }
                featureFlag="debugTools"
                featureFlagStoreData={{}}
              />
              <GearOptionsButtonComponent
                deps={
                  {
                    "dropdownClickHandler": {},
                    "launchPanelHeaderClickHandler": {},
                    "popupActionMessageCreator": {},
                  }
                }
                featureFlagData={{}}
              />
              <HamburgerMenuButton
                deps={
                  {
                    "dropdownClickHandler": {},
                    "launchPanelHeaderClickHandler": {},
                    "popupActionMessageCreator": {},
                  }
                }
                header={[Circular]}
                popupWindow={{}}
              />
            </React.Fragment>,
            "subtitle": "test subtitle",
            "title": "test title",
          },
          "memoizedState": null,
          "mode": 1,
          "pendingProps": {
            "children": <React.Fragment>
              <FlaggedComponent
                enableJSXElement={
                  <CustomizedIconButton
                    ariaLabel="open debug tools"
                    iconProps={
                      {
                        "iconName": "Cat",
                      }
                    }
                  />
                }
                featureFlag="debugTools"
                featureFlagStoreData={{}}
              />
              <GearOptionsButtonComponent
                deps={
                  {
                    "dropdownClickHandler": {},
                    "launchPanelHeaderClickHandler": {},
                    "popupActionMessageCreator": {},
                  }
                }
                featureFlagData={{}}
              />
              <HamburgerMenuButton
                deps={
                  {
                    "dropdownClickHandler": {},
                    "launchPanelHeaderClickHandler": {},
                    "popupActionMessageCreator": {},
                  }
                }
                header={[Circular]}
                popupWindow={{}}
              />
            </React.Fragment>,
            "subtitle": "test subtitle",
            "title": "test title",
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": <mock-header
            subtitle="test subtitle"
            title="test title"
          >
            <mock-flaggedcomponent
              enablejsxelement="[object Object]"
              featureflag="debugTools"
              featureflagstoredata="[object Object]"
            />
            <mock-gearoptionsbuttoncomponent
              deps="[object Object]"
              featureflagdata="[object Object]"
            />
            <mock-hamburgermenubutton
              deps="[object Object]"
              header="[object Object]"
              popupwindow="[object Object]"
            />
          </mock-header>,
          "subtreeFlags": 1048577,
          "tag": 5,
          "treeBaseDuration": 0,
          "type": "mock-Header",
          "updateQueue": null,
        },
        "childLanes": 0,
        "deletions": null,
        "dependencies": null,
        "elementType": [MockFunction] {
          "calls": [
            [
              {
                "children": <React.Fragment>
                  <FlaggedComponent
                    enableJSXElement={
                      <CustomizedIconButton
                        ariaLabel="open debug tools"
                        iconProps={
                          {
                            "iconName": "Cat",
                          }
                        }
                      />
                    }
                    featureFlag="debugTools"
                    featureFlagStoreData={{}}
                  />
                  <GearOptionsButtonComponent
                    deps={
                      {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      }
                    }
                    featureFlagData={{}}
                  />
                  <HamburgerMenuButton
                    deps={
                      {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      }
                    }
                    header={[Circular]}
                    popupWindow={{}}
                  />
                </React.Fragment>,
                "subtitle": "test subtitle",
                "title": "test title",
              },
              {},
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": <mock-Header
                subtitle="test subtitle"
                title="test title"
              >
                <React.Fragment>
                  <FlaggedComponent
                    enableJSXElement={
                      <CustomizedIconButton
                        ariaLabel="open debug tools"
                        iconProps={
                          {
                            "iconName": "Cat",
                          }
                        }
                      />
                    }
                    featureFlag="debugTools"
                    featureFlagStoreData={{}}
                  />
                  <GearOptionsButtonComponent
                    deps={
                      {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      }
                    }
                    featureFlagData={{}}
                  />
                  <HamburgerMenuButton
                    deps={
                      {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      }
                    }
                    header={[Circular]}
                    popupWindow={{}}
                  />
                </React.Fragment>
              </mock-Header>,
            },
          ],
        },
        "flags": 1,
        "index": 0,
        "key": null,
        "lanes": 0,
        "memoizedProps": {
          "children": <React.Fragment>
            <FlaggedComponent
              enableJSXElement={
                <CustomizedIconButton
                  ariaLabel="open debug tools"
                  iconProps={
                    {
                      "iconName": "Cat",
                    }
                  }
                />
              }
              featureFlag="debugTools"
              featureFlagStoreData={{}}
            />
            <GearOptionsButtonComponent
              deps={
                {
                  "dropdownClickHandler": {},
                  "launchPanelHeaderClickHandler": {},
                  "popupActionMessageCreator": {},
                }
              }
              featureFlagData={{}}
            />
            <HamburgerMenuButton
              deps={
                {
                  "dropdownClickHandler": {},
                  "launchPanelHeaderClickHandler": {},
                  "popupActionMessageCreator": {},
                }
              }
              header={[Circular]}
              popupWindow={{}}
            />
          </React.Fragment>,
          "subtitle": "test subtitle",
          "title": "test title",
        },
        "memoizedState": null,
        "mode": 1,
        "pendingProps": {
          "children": <React.Fragment>
            <FlaggedComponent
              enableJSXElement={
                <CustomizedIconButton
                  ariaLabel="open debug tools"
                  iconProps={
                    {
                      "iconName": "Cat",
                    }
                  }
                />
              }
              featureFlag="debugTools"
              featureFlagStoreData={{}}
            />
            <GearOptionsButtonComponent
              deps={
                {
                  "dropdownClickHandler": {},
                  "launchPanelHeaderClickHandler": {},
                  "popupActionMessageCreator": {},
                }
              }
              featureFlagData={{}}
            />
            <HamburgerMenuButton
              deps={
                {
                  "dropdownClickHandler": {},
                  "launchPanelHeaderClickHandler": {},
                  "popupActionMessageCreator": {},
                }
              }
              header={[Circular]}
              popupWindow={{}}
            />
          </React.Fragment>,
          "subtitle": "test subtitle",
          "title": "test title",
        },
        "ref": null,
        "return": [Circular],
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": null,
        "subtreeFlags": 1048577,
        "tag": 0,
        "treeBaseDuration": 0,
        "type": [MockFunction] {
          "calls": [
            [
              {
                "children": <React.Fragment>
                  <FlaggedComponent
                    enableJSXElement={
                      <CustomizedIconButton
                        ariaLabel="open debug tools"
                        iconProps={
                          {
                            "iconName": "Cat",
                          }
                        }
                      />
                    }
                    featureFlag="debugTools"
                    featureFlagStoreData={{}}
                  />
                  <GearOptionsButtonComponent
                    deps={
                      {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      }
                    }
                    featureFlagData={{}}
                  />
                  <HamburgerMenuButton
                    deps={
                      {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      }
                    }
                    header={[Circular]}
                    popupWindow={{}}
                  />
                </React.Fragment>,
                "subtitle": "test subtitle",
                "title": "test title",
              },
              {},
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": <mock-Header
                subtitle="test subtitle"
                title="test title"
              >
                <React.Fragment>
                  <FlaggedComponent
                    enableJSXElement={
                      <CustomizedIconButton
                        ariaLabel="open debug tools"
                        iconProps={
                          {
                            "iconName": "Cat",
                          }
                        }
                      />
                    }
                    featureFlag="debugTools"
                    featureFlagStoreData={{}}
                  />
                  <GearOptionsButtonComponent
                    deps={
                      {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      }
                    }
                    featureFlagData={{}}
                  />
                  <HamburgerMenuButton
                    deps={
                      {
                        "dropdownClickHandler": {},
                        "launchPanelHeaderClickHandler": {},
                        "popupActionMessageCreator": {},
                      }
                    }
                    header={[Circular]}
                    popupWindow={{}}
                  />
                </React.Fragment>
              </mock-Header>,
            },
          ],
        },
        "updateQueue": null,
      },
      "childLanes": 0,
      "deletions": null,
      "dependencies": null,
      "elementType": [Function],
      "flags": 1,
      "index": 0,
      "key": null,
      "lanes": 0,
      "memoizedProps": {
        "deps": {
          "dropdownClickHandler": {},
          "launchPanelHeaderClickHandler": {},
          "popupActionMessageCreator": {},
        },
        "featureFlags": {},
        "openAdhocToolsPanel": [Function],
        "popupWindow": {},
        "subtitle": "test subtitle",
        "title": "test title",
      },
      "memoizedState": {},
      "mode": 1,
      "pendingProps": {
        "deps": {
          "dropdownClickHandler": {},
          "launchPanelHeaderClickHandler": {},
          "popupActionMessageCreator": {},
        },
        "featureFlags": {},
        "openAdhocToolsPanel": [Function],
        "popupWindow": {},
        "subtitle": "test subtitle",
        "title": "test title",
      },
      "ref": null,
      "return": FiberNode {
        "_debugHookTypes": null,
        "_debugNeedsRemount": false,
        "_debugOwner": null,
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": FiberNode {
          "_debugHookTypes": null,
          "_debugNeedsRemount": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": [Circular],
          "child": null,
          "childLanes": 0,
          "deletions": null,
          "dependencies": null,
          "elementType": null,
          "flags": 0,
          "index": 0,
          "key": null,
          "lanes": 16,
          "memoizedProps": null,
          "memoizedState": {
            "cache": null,
            "element": null,
            "isDehydrated": false,
            "pendingSuspenseBoundaries": null,
            "transitions": null,
          },
          "mode": 1,
          "pendingProps": null,
          "ref": null,
          "return": null,
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": FiberRootNode {
            "_debugRootType": "createRoot()",
            "callbackNode": null,
            "callbackPriority": 0,
            "containerInfo": <div>
              <mock-header
                subtitle="test subtitle"
                title="test title"
              >
                <mock-flaggedcomponent
                  enablejsxelement="[object Object]"
                  featureflag="debugTools"
                  featureflagstoredata="[object Object]"
                />
                <mock-gearoptionsbuttoncomponent
                  deps="[object Object]"
                  featureflagdata="[object Object]"
                />
                <mock-hamburgermenubutton
                  deps="[object Object]"
                  header="[object Object]"
                  popupwindow="[object Object]"
                />
              </mock-header>
            </div>,
            "context": {},
            "current": [Circular],
            "effectDuration": 0,
            "entangledLanes": 0,
            "entanglements": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
            ],
            "eventTimes": [
              0,
              0,
              0,
              0,
              -1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
            ],
            "expirationTimes": [
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
            ],
            "expiredLanes": 0,
            "finishedLanes": 0,
            "finishedWork": null,
            "identifierPrefix": "",
            "memoizedUpdaters": Set {},
            "mutableReadLanes": 0,
            "mutableSourceEagerHydrationData": null,
            "onRecoverableError": [Function],
            "passiveEffectDuration": 0,
            "pendingChildren": null,
            "pendingContext": null,
            "pendingLanes": 0,
            "pendingUpdatersLaneMap": [
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
            ],
            "pingCache": null,
            "pingedLanes": 0,
            "suspendedLanes": 0,
            "tag": 1,
            "timeoutHandle": -1,
          },
          "subtreeFlags": 0,
          "tag": 3,
          "treeBaseDuration": 0,
          "type": null,
          "updateQueue": {
            "baseState": {
              "cache": null,
              "element": null,
              "isDehydrated": false,
              "pendingSuspenseBoundaries": null,
              "transitions": null,
            },
            "effects": null,
            "firstBaseUpdate": {
              "callback": null,
              "eventTime": 13773.1253,
              "lane": 16,
              "next": null,
              "payload": {
                "element": <LaunchPanelHeader
                  deps={
                    {
                      "dropdownClickHandler": {},
                      "launchPanelHeaderClickHandler": {},
                      "popupActionMessageCreator": {},
                    }
                  }
                  featureFlags={{}}
                  openAdhocToolsPanel={[Function]}
                  popupWindow={{}}
                  subtitle="test subtitle"
                  title="test title"
                />,
              },
              "tag": 0,
            },
            "lastBaseUpdate": {
              "callback": null,
              "eventTime": 13773.1253,
              "lane": 16,
              "next": null,
              "payload": {
                "element": <LaunchPanelHeader
                  deps={
                    {
                      "dropdownClickHandler": {},
                      "launchPanelHeaderClickHandler": {},
                      "popupActionMessageCreator": {},
                    }
                  }
                  featureFlags={{}}
                  openAdhocToolsPanel={[Function]}
                  popupWindow={{}}
                  subtitle="test subtitle"
                  title="test title"
                />,
              },
              "tag": 0,
            },
            "shared": {
              "interleaved": null,
              "lanes": 0,
              "pending": null,
            },
          },
        },
        "child": [Circular],
        "childLanes": 0,
        "deletions": null,
        "dependencies": null,
        "elementType": null,
        "flags": 1024,
        "index": 0,
        "key": null,
        "lanes": 0,
        "memoizedProps": null,
        "memoizedState": {
          "cache": null,
          "element": <LaunchPanelHeader
            deps={
              {
                "dropdownClickHandler": {},
                "launchPanelHeaderClickHandler": {},
                "popupActionMessageCreator": {},
              }
            }
            featureFlags={{}}
            openAdhocToolsPanel={[Function]}
            popupWindow={{}}
            subtitle="test subtitle"
            title="test title"
          />,
          "isDehydrated": false,
          "pendingSuspenseBoundaries": null,
          "transitions": null,
        },
        "mode": 1,
        "pendingProps": null,
        "ref": null,
        "return": null,
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": FiberRootNode {
          "_debugRootType": "createRoot()",
          "callbackNode": null,
          "callbackPriority": 0,
          "containerInfo": <div>
            <mock-header
              subtitle="test subtitle"
              title="test title"
            >
              <mock-flaggedcomponent
                enablejsxelement="[object Object]"
                featureflag="debugTools"
                featureflagstoredata="[object Object]"
              />
              <mock-gearoptionsbuttoncomponent
                deps="[object Object]"
                featureflagdata="[object Object]"
              />
              <mock-hamburgermenubutton
                deps="[object Object]"
                header="[object Object]"
                popupwindow="[object Object]"
              />
            </mock-header>
          </div>,
          "context": {},
          "current": [Circular],
          "effectDuration": 0,
          "entangledLanes": 0,
          "entanglements": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
          ],
          "eventTimes": [
            0,
            0,
            0,
            0,
            -1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
          ],
          "expirationTimes": [
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
          ],
          "expiredLanes": 0,
          "finishedLanes": 0,
          "finishedWork": null,
          "identifierPrefix": "",
          "memoizedUpdaters": Set {},
          "mutableReadLanes": 0,
          "mutableSourceEagerHydrationData": null,
          "onRecoverableError": [Function],
          "passiveEffectDuration": 0,
          "pendingChildren": null,
          "pendingContext": null,
          "pendingLanes": 0,
          "pendingUpdatersLaneMap": [
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
            Set {},
          ],
          "pingCache": null,
          "pingedLanes": 0,
          "suspendedLanes": 0,
          "tag": 1,
          "timeoutHandle": -1,
        },
        "subtreeFlags": 1048579,
        "tag": 3,
        "treeBaseDuration": 0,
        "type": null,
        "updateQueue": {
          "baseState": {
            "cache": null,
            "element": <LaunchPanelHeader
              deps={
                {
                  "dropdownClickHandler": {},
                  "launchPanelHeaderClickHandler": {},
                  "popupActionMessageCreator": {},
                }
              }
              featureFlags={{}}
              openAdhocToolsPanel={[Function]}
              popupWindow={{}}
              subtitle="test subtitle"
              title="test title"
            />,
            "isDehydrated": false,
            "pendingSuspenseBoundaries": null,
            "transitions": null,
          },
          "effects": null,
          "firstBaseUpdate": null,
          "lastBaseUpdate": null,
          "shared": {
            "interleaved": null,
            "lanes": 0,
            "pending": null,
          },
        },
      },
      "selfBaseDuration": 0,
      "sibling": null,
      "stateNode": [Circular],
      "subtreeFlags": 1048577,
      "tag": 1,
      "treeBaseDuration": 0,
      "type": [Function],
      "updateQueue": {
        "baseState": {},
        "effects": null,
        "firstBaseUpdate": null,
        "lastBaseUpdate": null,
        "shared": {
          "interleaved": null,
          "lanes": 0,
          "pending": null,
        },
      },
    },
    "context": {},
    "props": {
      "deps": {
        "dropdownClickHandler": {},
        "launchPanelHeaderClickHandler": {},
        "popupActionMessageCreator": {},
      },
      "featureFlags": {},
      "openAdhocToolsPanel": [Function],
      "popupWindow": {},
      "subtitle": "test subtitle",
      "title": "test title",
    },
    "refs": {},
    "state": {},
    "updater": {
      "enqueueForceUpdate": [Function],
      "enqueueReplaceState": [Function],
      "enqueueSetState": [Function],
      "isMounted": [Function],
    },
  },
  "popupWindow": {},
}
`;
