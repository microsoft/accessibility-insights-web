// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PopupView render actual content render toggles view: ad-hoc tools 1`] = `
<DocumentFragment>
  <div
    class="ms-Fabric ad-hoc-tools-panel"
  >
    <mock-launchpanelheader
      deps="[object Object]"
      featureflags="[object Object]"
      title="test title"
    />
    <mock-adhoctoolspanel />
  </div>
  <mock-telemetrypermissiondialog
    deps="[object Object]"
    isfirsttime=""
  />
</DocumentFragment>
`;

exports[`PopupView render actual content render toggles view: launch pad 1`] = `
<DocumentFragment>
  <div
    class="ms-Fabric launch-panel"
    id="new-launch-pad"
  >
    <mock-launchpanelheader
      deps="[object Object]"
      featureflags="[object Object]"
      subtitle="[object Object]"
      title="test title"
    />
    <mock-launchpad
      deps="[object Object]"
      productname="test title"
      version="2"
    />
  </div>
  <mock-telemetrypermissiondialog
    deps="[object Object]"
    isfirsttime=""
  />
</DocumentFragment>
`;

exports[`PopupView render actual content render toggles view: launch pad: subtitle 1`] = `
<DocumentFragment>
  <mock-newtablink
    href="https://go.microsoft.com/fwlink/?linkid=2082374"
  >
    Watch 3-minute video introduction
  </mock-newtablink>
   
</DocumentFragment>
`;

exports[`PopupView render actual content renderAdHocToolsPanel 1`] = `
<DocumentFragment>
  <div
    class="ms-Fabric ad-hoc-tools-panel"
  >
    <mock-launchpanelheader
      deps="[object Object]"
      featureflags="[object Object]"
      title="test title"
    />
    <mock-adhoctoolspanel />
  </div>
  <mock-telemetrypermissiondialog
    deps="[object Object]"
    isfirsttime=""
  />
</DocumentFragment>
`;

exports[`PopupView render spinner 1`] = `
{
  "$$typeof": Symbol(react.transitional.element),
  "_owner": null,
  "_store": {},
  "key": null,
  "props": {
    "className": "insights-spinner",
    "label": "Loading...",
    "size": 3,
  },
  "type": {
    "$$typeof": Symbol(react.forward_ref),
    "render": [Function],
  },
}
`;

exports[`PopupView renderFailureMsgPanelForChromeUrl 1`] = `
{
  "$$typeof": Symbol(react.transitional.element),
  "_owner": null,
  "_store": {},
  "key": null,
  "props": {
    "children": [
      {
        "$$typeof": Symbol(react.transitional.element),
        "_owner": null,
        "_store": {},
        "key": null,
        "props": {
          "title": "test title",
        },
        "type": [Function],
      },
      {
        "$$typeof": Symbol(react.transitional.element),
        "_owner": null,
        "_store": {},
        "key": null,
        "props": {
          "children": {
            "$$typeof": Symbol(react.transitional.element),
            "_owner": null,
            "_store": {},
            "key": null,
            "props": {
              "children": {
                "$$typeof": Symbol(react.transitional.element),
                "_owner": null,
                "_store": {},
                "key": null,
                "props": {
                  "children": {
                    "$$typeof": Symbol(react.transitional.element),
                    "_owner": null,
                    "_store": {},
                    "key": null,
                    "props": {
                      "children": [
                        {
                          "$$typeof": Symbol(react.transitional.element),
                          "_owner": null,
                          "_store": {},
                          "key": "0",
                          "props": {
                            "children": "Accessibility Insights for Web can't run on this URL.",
                          },
                          "type": "span",
                        },
                        {
                          "$$typeof": Symbol(react.transitional.element),
                          "_owner": null,
                          "_store": {},
                          "key": "1",
                          "props": {},
                          "type": "br",
                        },
                        {
                          "$$typeof": Symbol(react.transitional.element),
                          "_owner": null,
                          "_store": {},
                          "key": "2",
                          "props": {
                            "children": "You'll need to go to a different page.",
                          },
                          "type": "span",
                        },
                        undefined,
                      ],
                    },
                    "type": Symbol(react.fragment),
                  },
                  "className": "launch-panel-general-container",
                },
                "type": "div",
              },
              "className": "popup-grid",
            },
            "type": "div",
          },
          "className": "main-section",
        },
        "type": "div",
      },
    ],
    "className": "ms-Fabric unsupported-url-info-panel",
  },
  "type": "div",
}
`;

exports[`PopupView renderFailureMsgPanelForFileUrl 1`] = `
<DocumentFragment>
  <mock-fileurlunsupportedmessagepanel
    deps="[object Object]"
    header="[object Object]"
    title="test title"
  />
</DocumentFragment>
`;
