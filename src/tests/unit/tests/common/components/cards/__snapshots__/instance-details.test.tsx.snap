// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InstanceDetails isSelected drives the styling for the card 1`] = `
<div
  className="instanceDetailsCardContainer selected"
  data-automation-id="instance-card"
>
  <div
    className="instanceDetailsCard selected interactive"
    onClick={[Function]}
    tabIndex={-1}
  >
    <div>
      <table
        className="reportInstanceTable"
      >
        <tbody>
          <React.Fragment />
          <React.Fragment />
          <React.Fragment />
        </tbody>
      </table>
      <button
        aria-label="highlight test-id"
        aria-pressed={true}
        className="hiddenHighlightButton"
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
      />
      <InstanceDetailsFooter
        deps={
          {
            "cardInteractionSupport": {
              "supportsCopyFailureDetails": true,
              "supportsHighlighting": true,
              "supportsIssueFiling": true,
            },
            "getPropertyConfigById": [Function],
          }
        }
        result={
          {
            "descriptors": {},
            "identifiers": {
              "conciseName": "test-concise-name",
              "identifier": "test-id",
              "this-property-does-not-have-config": "some value",
            },
            "isSelected": true,
            "resolution": {},
            "ruleId": "image-alt",
            "status": "fail",
            "uid": "some-guid-here",
          }
        }
      />
    </div>
  </div>
</div>
`;

exports[`InstanceDetails isSelected drives the styling for the card 2`] = `
<div
  className="instanceDetailsCardContainer"
  data-automation-id="instance-card"
>
  <div
    className="instanceDetailsCard interactive"
    onClick={[Function]}
    tabIndex={-1}
  >
    <div>
      <table
        className="reportInstanceTable"
      >
        <tbody>
          <React.Fragment />
          <React.Fragment />
          <React.Fragment />
        </tbody>
      </table>
      <button
        aria-label="highlight test-id"
        aria-pressed={false}
        className="hiddenHighlightButton"
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
      />
      <InstanceDetailsFooter
        deps={
          {
            "cardInteractionSupport": {
              "supportsCopyFailureDetails": true,
              "supportsHighlighting": true,
              "supportsIssueFiling": true,
            },
            "getPropertyConfigById": [Function],
          }
        }
        result={
          {
            "descriptors": {},
            "identifiers": {
              "conciseName": "test-concise-name",
              "identifier": "test-id",
              "this-property-does-not-have-config": "some value",
            },
            "isSelected": false,
            "resolution": {},
            "ruleId": "image-alt",
            "status": "fail",
            "uid": "some-guid-here",
          }
        }
      />
    </div>
  </div>
</div>
`;

exports[`InstanceDetails renders 1`] = `
<div
  className="instanceDetailsCardContainer"
  data-automation-id="instance-card"
>
  <div
    className="instanceDetailsCard interactive"
    onClick={[Function]}
    tabIndex={-1}
  >
    <div>
      <table
        className="reportInstanceTable"
      >
        <tbody>
          <React.Fragment>
            <css-selector
              deps={
                {
                  "cardInteractionSupport": {
                    "supportsCopyFailureDetails": true,
                    "supportsHighlighting": true,
                    "supportsIssueFiling": true,
                  },
                  "getPropertyConfigById": [Function],
                }
              }
              index={22}
              propertyData="body img"
            />
          </React.Fragment>
          <React.Fragment>
            <snippet
              deps={
                {
                  "cardInteractionSupport": {
                    "supportsCopyFailureDetails": true,
                    "supportsHighlighting": true,
                    "supportsIssueFiling": true,
                  },
                  "getPropertyConfigById": [Function],
                }
              }
              index={22}
              propertyData="this is a sample snippet"
            />
          </React.Fragment>
          <React.Fragment>
            <how-to-fix-web
              deps={
                {
                  "cardInteractionSupport": {
                    "supportsCopyFailureDetails": true,
                    "supportsHighlighting": true,
                    "supportsIssueFiling": true,
                  },
                  "getPropertyConfigById": [Function],
                }
              }
              index={22}
              propertyData={
                {
                  "all": [],
                  "any": [
                    "Element does not have an alt attribute",
                    "aria-label attribute does not exist or is empty",
                    "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                  ],
                  "none": [],
                }
              }
            />
          </React.Fragment>
        </tbody>
      </table>
      <button
        aria-label="highlight body img"
        className="hiddenHighlightButton"
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
      />
      <InstanceDetailsFooter
        deps={
          {
            "cardInteractionSupport": {
              "supportsCopyFailureDetails": true,
              "supportsHighlighting": true,
              "supportsIssueFiling": true,
            },
            "getPropertyConfigById": [Function],
          }
        }
        result={
          {
            "descriptors": {
              "snippet": "this is a sample snippet",
            },
            "identifiers": {
              "conciseName": "body img",
              "css-selector": "body img",
              "identifier": "body img",
            },
            "resolution": {
              "how-to-fix-web": {
                "all": [],
                "any": [
                  "Element does not have an alt attribute",
                  "aria-label attribute does not exist or is empty",
                  "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                ],
                "none": [],
              },
              "howToFixSummary": "sample how to fix summary",
            },
            "ruleId": "image-alt",
            "status": "fail",
            "uid": "some-guid-here",
          }
        }
      />
    </div>
  </div>
</div>
`;

exports[`InstanceDetails renders nothing when there is no card row configuration for the property / no property 1`] = `
<div
  className="instanceDetailsCardContainer"
  data-automation-id="instance-card"
>
  <div
    className="instanceDetailsCard interactive"
    onClick={[Function]}
    tabIndex={-1}
  >
    <div>
      <table
        className="reportInstanceTable"
      >
        <tbody>
          <React.Fragment />
          <React.Fragment />
          <React.Fragment />
        </tbody>
      </table>
      <button
        aria-label="highlight test-id"
        className="hiddenHighlightButton"
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
      />
      <InstanceDetailsFooter
        deps={
          {
            "cardInteractionSupport": {
              "supportsCopyFailureDetails": true,
              "supportsHighlighting": true,
              "supportsIssueFiling": true,
            },
            "getPropertyConfigById": [Function],
          }
        }
        result={
          {
            "descriptors": {},
            "identifiers": {
              "conciseName": "test-concise-name",
              "identifier": "test-id",
              "this-property-does-not-have-config": "some value",
            },
            "resolution": {},
            "ruleId": "image-alt",
            "status": "fail",
            "uid": "some-guid-here",
          }
        }
      />
    </div>
  </div>
</div>
`;
