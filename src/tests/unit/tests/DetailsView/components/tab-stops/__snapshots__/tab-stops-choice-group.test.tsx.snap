// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TabStopsChoiceGroup render with fail status 1`] = `
<DocumentFragment>
  <div
    class="choiceGroupContainer"
  >
    <mock-styledchoicegroup
      data-automation-id="tabStopsPassFailChoiceGroup"
      islabelvisible="false"
      options="[object Object],[object Object]"
      selectedkey="fail"
      styles="[object Object]"
    />
    <div
      class="secondaryControlsWrapper"
    >
      <mock-customizediconbutton
        arialabel="undo"
        iconprops="[object Object]"
      />
      <mock-customizediconbutton
        arialabel="add failure instance"
        data-automation-id="addTabStopsFailureInstance"
        iconprops="[object Object]"
      />
    </div>
  </div>
</DocumentFragment>
`;

exports[`TabStopsChoiceGroup render with fail status: CustomizedIconButton props 1`] = `
{
  "ariaLabel": "undo",
  "iconProps": {
    "iconName": "undo",
  },
  "onClick": [Function],
}
`;

exports[`TabStopsChoiceGroup render with fail status: StyledChoiceGroup props 1`] = `
{
  "componentRef": [Function],
  "data-automation-id": "tabStopsPassFailChoiceGroup",
  "isLabelVisible": false,
  "onChange": [Function],
  "options": [
    {
      "ariaLabel": "Pass",
      "key": "pass",
      "onRenderLabel": [Function],
      "styles": {
        "field": undefined,
        "root": "radioButtonOption",
      },
      "text": "Pass",
    },
    {
      "ariaLabel": "Fail",
      "key": "fail",
      "onRenderLabel": [Function],
      "styles": {
        "field": undefined,
        "root": "radioButtonOption",
      },
      "text": "Fail",
    },
  ],
  "selectedKey": "fail",
  "styles": {
    "flexContainer": "radioButtonGroup",
  },
}
`;

exports[`TabStopsChoiceGroup render with pass status 1`] = `
<DocumentFragment>
  <div
    class="choiceGroupContainer"
  >
    <mock-styledchoicegroup
      data-automation-id="tabStopsPassFailChoiceGroup"
      islabelvisible="false"
      options="[object Object],[object Object]"
      selectedkey="pass"
      styles="[object Object]"
    />
    <div
      class="secondaryControlsWrapper"
    >
      <mock-customizediconbutton
        arialabel="undo"
        iconprops="[object Object]"
      />
    </div>
  </div>
</DocumentFragment>
`;

exports[`TabStopsChoiceGroup render with pass status: StyledChoiceGroup props 1`] = `
{
  "componentRef": [Function],
  "data-automation-id": "tabStopsPassFailChoiceGroup",
  "isLabelVisible": false,
  "onChange": [Function],
  "options": [
    {
      "ariaLabel": "Pass",
      "key": "pass",
      "onRenderLabel": [Function],
      "styles": {
        "field": undefined,
        "root": "radioButtonOption",
      },
      "text": "Pass",
    },
    {
      "ariaLabel": "Fail",
      "key": "fail",
      "onRenderLabel": [Function],
      "styles": {
        "field": undefined,
        "root": "radioButtonOption",
      },
      "text": "Fail",
    },
  ],
  "selectedKey": "pass",
  "styles": {
    "flexContainer": "radioButtonGroup",
  },
}
`;

exports[`TabStopsChoiceGroup render with unknown status 1`] = `
<DocumentFragment>
  <div
    class="choiceGroupContainer"
  >
    <mock-styledchoicegroup
      data-automation-id="tabStopsPassFailChoiceGroup"
      islabelvisible="false"
      options="[object Object],[object Object]"
      selectedkey="unknown"
      styles="[object Object]"
    />
    <div
      class="secondaryControlsWrapper"
    />
  </div>
</DocumentFragment>
`;

exports[`TabStopsChoiceGroup render with unknown status: StyledChoiceGroup props 1`] = `
{
  "componentRef": [Function],
  "data-automation-id": "tabStopsPassFailChoiceGroup",
  "isLabelVisible": false,
  "onChange": [Function],
  "options": [
    {
      "ariaLabel": "Pass",
      "key": "pass",
      "onRenderLabel": [Function],
      "styles": {
        "field": undefined,
        "root": "radioButtonOption",
      },
      "text": "Pass",
    },
    {
      "ariaLabel": "Fail",
      "key": "fail",
      "onRenderLabel": [Function],
      "styles": {
        "field": undefined,
        "root": "radioButtonOption",
      },
      "text": "Fail",
    },
  ],
  "selectedKey": "unknown",
  "styles": {
    "flexContainer": "radioButtonGroup",
  },
}
`;
