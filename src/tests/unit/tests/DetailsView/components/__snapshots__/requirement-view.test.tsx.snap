// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RequirementViewTest renders RequirementContextSection if shouldShowRequirementContextBox is true 1`] = `
<div
  className="requirementView"
>
  <div>
    <RequirementViewTitle
      deps={
        {
          "assessmentViewUpdateHandler": [typemoq mock object],
          "getProvider": [Function],
        }
      }
      shouldShowInfoButton={true}
    />
    <div
      className="requirementContent"
    >
      <div
        className="mainContent"
      >
        <React.Fragment>
          <RequirementInstructions />
          <RequirementTableSection
            assessmentInstanceTableHandler={
              {
                "changeRequirementStatus": null,
              }
            }
            assessmentNavState={
              {
                "selectedTestSubview": "test-requirement-name",
                "selectedTestType": 0,
              }
            }
            assessmentsProvider={[typemoq mock object]}
            featureFlagStoreData={
              {
                "some feature flag": true,
              }
            }
            instancesMap={{}}
            isRequirementScanned={true}
            manualRequirementResultMap={
              {
                "some manual test step result id": null,
              }
            }
            pathSnippetStoreData={
              {
                "path": null,
              }
            }
            requirement={
              {
                "key": "test-requirement-key",
              }
            }
            selectedRequirementHasVisualHelper={false}
          />
        </React.Fragment>
      </div>
      <div
        className="requirementContextBox"
      >
        <RequirementContextSection
          deps={
            {
              "assessmentViewUpdateHandler": [typemoq mock object],
              "getProvider": [Function],
            }
          }
        />
      </div>
    </div>
  </div>
  <div
    className="nextRequirementButtonContainer"
  >
    <NextRequirementButton
      className="nextRequirementButton"
      deps={
        {
          "assessmentViewUpdateHandler": [typemoq mock object],
          "getProvider": [Function],
        }
      }
      nextRequirement={
        {
          "key": "other-requirement-key",
        }
      }
      nextRequirementVisualizationType={0}
    />
  </div>
</div>
`;

exports[`RequirementViewTest renders with content from props 1`] = `
<div
  className="requirementView"
>
  <div>
    <RequirementViewTitle
      deps={
        {
          "assessmentViewUpdateHandler": [typemoq mock object],
          "getProvider": [Function],
        }
      }
      shouldShowInfoButton={true}
    />
    <div
      className="requirementContent"
    >
      <div
        className="mainContent"
      >
        <React.Fragment>
          <RequirementInstructions />
          <RequirementTableSection
            assessmentInstanceTableHandler={
              {
                "changeRequirementStatus": null,
              }
            }
            assessmentNavState={
              {
                "selectedTestSubview": "test-requirement-name",
                "selectedTestType": 0,
              }
            }
            assessmentsProvider={[typemoq mock object]}
            featureFlagStoreData={
              {
                "some feature flag": true,
              }
            }
            instancesMap={{}}
            isRequirementScanned={true}
            manualRequirementResultMap={
              {
                "some manual test step result id": null,
              }
            }
            pathSnippetStoreData={
              {
                "path": null,
              }
            }
            requirement={
              {
                "key": "test-requirement-key",
              }
            }
            selectedRequirementHasVisualHelper={false}
          />
        </React.Fragment>
      </div>
    </div>
  </div>
  <div
    className="nextRequirementButtonContainer"
  >
    <NextRequirementButton
      className="nextRequirementButton"
      deps={
        {
          "assessmentViewUpdateHandler": [typemoq mock object],
          "getProvider": [Function],
        }
      }
      nextRequirement={
        {
          "key": "other-requirement-key",
        }
      }
      nextRequirementVisualizationType={0}
    />
  </div>
</div>
`;
