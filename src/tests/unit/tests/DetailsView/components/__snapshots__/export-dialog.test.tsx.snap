// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExportDialog renders with CodePen export form 1`] = `
<form
  action="https://codepen.io/pen/define"
  method="POST"
  rel="noopener"
  style={
    Object {
      "visibility": "hidden",
    }
  }
  target="_blank"
>
  <input
    name="data"
    type="hidden"
    value="{\\"title\\":\\"THE REPORT FILE NAME\\",\\"description\\":\\"description\\",\\"html\\":\\"fake html\\",\\"editors\\":\\"100\\"}"
  />
  <button
    type="submit"
  />
</form>
`;

exports[`ExportDialog renders with export dropdown 1`] = `
"<Dialog hidden={false} onDismiss={[Function: onDismiss]} dialogContentProps={{...}} modalProps={{...}}>
  <StyledTextFieldBase multiline={true} autoFocus={true} rows={8} resizable={false} onChange={[Function: onDescriptionChange]} value=\\"description\\" ariaLabel=\\"Provide result description\\" />
  <StyledDialogFooterBase>
    <ExportDropdown htmlFileName=\\"THE REPORT FILE NAME\\" jsonFileName=\\"JSON file name\\" fileURLProvider={[Function: function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        _this._interceptor.removeInvocation(invocation_1);
                        var method = new MethodInfo(target, p);
                        var methodInvocation = new MethodInvocation(target, method, args, ProxyType.DYNAMIC);
                        _this._interceptor.intercept(methodInvocation);
                        return methodInvocation.returnValue;
                    }] { provideURL: [Function (anonymous)], [Symbol(Symbol.toStringTag)]: [Function: bound toString] }} featureFlagStoreData={{...}} htmlExportData=\\"fake html\\" jsonExportData=\\"fake json\\" generateExports={[Function: proxy]} onExportLinkClick={[Function: onExportLinkClick]} reportExportServices={{...}} />
  </StyledDialogFooterBase>
</Dialog>"
`;

exports[`ExportDialog renders with open false 1`] = `
<Dialog
  dialogContentProps={
    Object {
      "subText": "Optional: please describe the result (it will be saved in the report).",
      "title": "Provide result description",
      "type": 0,
    }
  }
  hidden={true}
  modalProps={
    Object {
      "containerClassName": "exportDialog",
      "isBlocking": false,
      "onDismissed": [Function],
    }
  }
  onDismiss={[Function]}
>
  <StyledTextFieldBase
    ariaLabel="Provide result description"
    autoFocus={true}
    multiline={true}
    onChange={[Function]}
    resizable={false}
    rows={8}
    value="description"
  />
  <StyledDialogFooterBase>
    <CustomizedPrimaryButton
      data-automation-id="single-export-to-html-button"
      download="THE REPORT FILE NAME"
      href="fake-url"
      onClick={[Function]}
    >
      Export
    </CustomizedPrimaryButton>
  </StyledDialogFooterBase>
</Dialog>
`;

exports[`ExportDialog renders with open true 1`] = `
<Dialog
  dialogContentProps={
    Object {
      "subText": "Optional: please describe the result (it will be saved in the report).",
      "title": "Provide result description",
      "type": 0,
    }
  }
  hidden={false}
  modalProps={
    Object {
      "containerClassName": "exportDialog",
      "isBlocking": false,
      "onDismissed": [Function],
    }
  }
  onDismiss={[Function]}
>
  <StyledTextFieldBase
    ariaLabel="Provide result description"
    autoFocus={true}
    multiline={true}
    onChange={[Function]}
    resizable={false}
    rows={8}
    value="description"
  />
  <StyledDialogFooterBase>
    <CustomizedPrimaryButton
      data-automation-id="single-export-to-html-button"
      download="THE REPORT FILE NAME"
      href="fake-url"
      onClick={[Function]}
    >
      Export
    </CustomizedPrimaryButton>
  </StyledDialogFooterBase>
</Dialog>
`;

exports[`ExportDialog renders without export dropdown due to lack of service 1`] = `
"<Dialog hidden={false} onDismiss={[Function: onDismiss]} dialogContentProps={{...}} modalProps={{...}}>
  <StyledTextFieldBase multiline={true} autoFocus={true} rows={8} resizable={false} onChange={[Function: onDescriptionChange]} value=\\"description\\" ariaLabel=\\"Provide result description\\" />
  <StyledDialogFooterBase>
    <CustomizedPrimaryButton onClick={[Function: onClick]} download=\\"THE REPORT FILE NAME\\" href=\\"fake-url\\" data-automation-id=\\"single-export-to-html-button\\">
      Export
    </CustomizedPrimaryButton>
  </StyledDialogFooterBase>
</Dialog>"
`;
