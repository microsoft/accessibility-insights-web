// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IssuesTableTest With issue filing support 1`] = `
<DocumentFragment>
  <div
    class="issuesTable"
  >
    <h1>
      test title test steps text
    </h1>
    <div
      class="issuesTableContent"
    >
      <mock-failedinstancessection
        cardselectionmessagecreator="[object Object]"
        cardsviewdata="[object Object]"
        cardsviewstoredata="[object Object]"
        deps="[object Object]"
        narrowmodestatus="[object Object]"
        scanmetadata="[object Object]"
        sectionheadinglevel="2"
        shouldalertfailurescount="true"
        userconfigurationstoredata="[object Object]"
      />
      <mock-issuefilingdialog
        isopen="false"
      />
    </div>
  </div>
</DocumentFragment>
`;

exports[`IssuesTableTest With issue filing support: FailedInstancesSection props 1`] = `
{
  "cardSelectionMessageCreator": {},
  "cardsViewData": {
    "allCardsCollapsed": true,
    "cards": {
      "fail": [
        {
          "description": "sample-description",
          "guidance": [
            {
              "href": "sample-guidance-href",
              "text": "sample-guidance-text",
            },
          ],
          "id": "some-rule",
          "nodes": [
            {
              "descriptors": {
                "snippet": "this is a sample snippet",
              },
              "identifiers": {
                "conciseName": "body img",
                "css-selector": "body img",
                "identifier": "body img",
              },
              "resolution": {
                "how-to-fix-web": {
                  "all": [],
                  "any": [
                    "Element does not have an alt attribute",
                    "aria-label attribute does not exist or is empty",
                    "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                  ],
                  "none": [],
                },
                "howToFixSummary": "sample how to fix summary",
              },
              "ruleId": "image-alt",
              "status": "fail",
              "uid": "some-guid-here",
            },
          ],
          "url": "sample-url",
        },
      ],
      "inapplicable": [],
      "pass": [],
      "unknown": [],
    },
    "visualHelperEnabled": true,
  },
  "cardsViewStoreData": {
    "isIssueFilingSettingsDialogOpen": false,
  },
  "deps": {
    "cardInteractionSupport": {
      "supportsIssueFiling": true,
    },
    "cardsViewController": {
      "closeIssueFilingSettingsDialog": [Function],
    },
    "detailsViewActionMessageCreator": [typemoq mock object],
    "getDateFromTimestamp": [Function],
    "issueFilingDialogPropsFactory": [Function],
    "issueFilingServiceProvider": [typemoq mock object],
    "reportGenerator": [typemoq mock object],
  },
  "narrowModeStatus": {},
  "scanMetadata": {
    "targetAppInfo": {
      "name": "app",
    },
  },
  "sectionHeadingLevel": 2,
  "shouldAlertFailuresCount": true,
  "userConfigurationStoreData": {},
}
`;

exports[`IssuesTableTest automated checks disabled 1`] = `
<DocumentFragment>
  <div
    class="issuesTable"
  >
    <h1>
      test title test steps text
    </h1>
    <div
      class="issuesTableContent"
    >
      <mock-failedinstancessection
        cardselectionmessagecreator="[object Object]"
        cardsviewdata="[object Object]"
        cardsviewstoredata="[object Object]"
        deps="[object Object]"
        narrowmodestatus="[object Object]"
        scanmetadata="[object Object]"
        sectionheadinglevel="2"
        shouldalertfailurescount="true"
        userconfigurationstoredata="[object Object]"
      />
    </div>
  </div>
</DocumentFragment>
`;

exports[`IssuesTableTest automated checks disabled: FailedInstancesSection props 1`] = `
{
  "cardSelectionMessageCreator": {},
  "cardsViewData": {
    "allCardsCollapsed": true,
    "cards": {
      "fail": [
        {
          "description": "sample-description",
          "guidance": [
            {
              "href": "sample-guidance-href",
              "text": "sample-guidance-text",
            },
          ],
          "id": "some-rule",
          "nodes": [
            {
              "descriptors": {
                "snippet": "this is a sample snippet",
              },
              "identifiers": {
                "conciseName": "body img",
                "css-selector": "body img",
                "identifier": "body img",
              },
              "resolution": {
                "how-to-fix-web": {
                  "all": [],
                  "any": [
                    "Element does not have an alt attribute",
                    "aria-label attribute does not exist or is empty",
                    "aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty",
                  ],
                  "none": [],
                },
                "howToFixSummary": "sample how to fix summary",
              },
              "ruleId": "image-alt",
              "status": "fail",
              "uid": "some-guid-here",
            },
          ],
          "url": "sample-url",
        },
      ],
      "inapplicable": [],
      "pass": [],
      "unknown": [],
    },
    "visualHelperEnabled": true,
  },
  "cardsViewStoreData": {
    "isIssueFilingSettingsDialogOpen": false,
  },
  "deps": {
    "cardInteractionSupport": {
      "supportsIssueFiling": false,
    },
    "cardsViewController": {
      "closeIssueFilingSettingsDialog": [Function],
    },
    "detailsViewActionMessageCreator": [typemoq mock object],
    "getDateFromTimestamp": [Function],
    "issueFilingDialogPropsFactory": [Function],
    "issueFilingServiceProvider": [typemoq mock object],
    "reportGenerator": [typemoq mock object],
  },
  "narrowModeStatus": {},
  "scanMetadata": {
    "targetAppInfo": {
      "name": "app",
    },
  },
  "sectionHeadingLevel": 2,
  "shouldAlertFailuresCount": true,
  "userConfigurationStoreData": {},
}
`;

exports[`IssuesTableTest includes subtitle if specified 1`] = `
<DocumentFragment>
  <div
    class="issuesTable"
  >
    <h1>
      test title test steps text
    </h1>
    <div
      class="issuesTableSubtitle"
    >
      test subtitle text
    </div>
    <mock-scanningspinner
      isspinning="true"
      label="Loading..."
    />
  </div>
</DocumentFragment>
`;

exports[`IssuesTableTest includes subtitle if specified: FailedInstancesSection props 1`] = `undefined`;

exports[`IssuesTableTest not scanning, issuesEnabled is true 1`] = `
<DocumentFragment>
  <div
    class="issuesTable"
  >
    <h1>
      test title test steps text
    </h1>
    <div
      class="issuesTableContent"
    >
      <mock-failedinstancessection
        cardselectionmessagecreator="[object Object]"
        cardsviewdata="[object Object]"
        cardsviewstoredata="[object Object]"
        deps="[object Object]"
        narrowmodestatus="[object Object]"
        scanmetadata="[object Object]"
        sectionheadinglevel="2"
        shouldalertfailurescount="true"
        userconfigurationstoredata="[object Object]"
      />
    </div>
  </div>
</DocumentFragment>
`;

exports[`IssuesTableTest spinner for scanning state 1`] = `
<DocumentFragment>
  <div
    class="issuesTable"
  >
    <h1>
      test title test steps text
    </h1>
    <div
      class="issuesTableContent"
    >
      <mock-scanningspinner
        isspinning="true"
        label="Scanning..."
      />
    </div>
  </div>
</DocumentFragment>
`;

exports[`IssuesTableTest spinner for scanning state: FailedInstancesSection props 1`] = `undefined`;

exports[`IssuesTableTest spinner, issuesEnabled == null 1`] = `
<DocumentFragment>
  <div
    class="issuesTable"
  >
    <h1>
      test title test steps text
    </h1>
    <mock-scanningspinner
      isspinning="true"
      label="Loading..."
    />
  </div>
</DocumentFragment>
`;

exports[`IssuesTableTest spinner, issuesEnabled == null: FailedInstancesSection props 1`] = `undefined`;
