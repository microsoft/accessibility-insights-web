// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdhocTabStopsTestView render handles guidance 1`] = `
<DocumentFragment>
  <div
    class="tabStopsTestViewContainer"
  >
    <div
      class="tabStopsTestView"
    >
      <mock-headingwithcontentlink
        deps="stub-deps"
        guidance="stub-guidance"
        headingtitle="test title"
        headingtitleclassname="tabStopsTestViewHeader"
        secondarytext=" Step 0 of 3 "
      />
      <p>
        <em>
          Note: this test requires you to use a keyboard and to visually identify interactive elements.
        </em>
      </p>
      <mock-styledtogglebase
        checked="true"
        classname="visualHelperToggle"
        id="tab-stops-visual-helper"
        label="Visual helper"
      />
      <mock-collapsiblecomponent
        content="[object Object]"
        contentclassname="requirementInstructions"
        header="[object Object]"
      />
      <h2
        class="requirementTableTitle"
      >
        Record your results
      </h2>
      <mock-themecustomizer
        themefamily="fast-pass"
        userconfigurationstoredata="stub-user-configuration-store-data"
      >
        <mock-tabstopsrequirementstable
          deps="stub-deps"
        />
        <mock-tabstopsfailedinstancesection
          alwaysrendersection="false"
          deps="stub-deps"
          sectionheadinglevel="2"
        />
        <mock-tabstopsfailedinstancepanel
          deps="stub-deps"
          failureinstancestate="[object Object]"
        />
        <mock-focuscomponent
          deps="stub-deps"
          tabbingenabled="true"
        />
        <mock-autodetectedfailuresdialog
          deps="stub-deps"
          userconfigurationstoredata="stub-user-configuration-store-data"
          visualizationscanresultdata="[object Object]"
        />
      </mock-themecustomizer>
    </div>
  </div>
</DocumentFragment>
`;

exports[`AdhocTabStopsTestView render handles no guidance 1`] = `
<DocumentFragment>
  <div
    class="tabStopsTestViewContainer"
  >
    <div
      class="tabStopsTestView"
    >
      <mock-headingwithcontentlink
        deps="stub-deps"
        headingtitle="test title"
        headingtitleclassname="tabStopsTestViewHeader"
        secondarytext=" Step 0 of 3 "
      />
      <p>
        <em>
          Note: this test requires you to use a keyboard and to visually identify interactive elements.
        </em>
      </p>
      <mock-styledtogglebase
        checked="true"
        classname="visualHelperToggle"
        id="tab-stops-visual-helper"
        label="Visual helper"
      />
      <mock-collapsiblecomponent
        content="[object Object]"
        contentclassname="requirementInstructions"
        header="[object Object]"
      />
      <h2
        class="requirementTableTitle"
      >
        Record your results
      </h2>
      <mock-themecustomizer
        themefamily="fast-pass"
        userconfigurationstoredata="stub-user-configuration-store-data"
      >
        <mock-tabstopsrequirementstable
          deps="stub-deps"
        />
        <mock-tabstopsfailedinstancesection
          alwaysrendersection="false"
          deps="stub-deps"
          sectionheadinglevel="2"
        />
        <mock-tabstopsfailedinstancepanel
          deps="stub-deps"
          failureinstancestate="[object Object]"
        />
        <mock-focuscomponent
          deps="stub-deps"
          tabbingenabled="true"
        />
        <mock-autodetectedfailuresdialog
          deps="stub-deps"
          userconfigurationstoredata="stub-user-configuration-store-data"
          visualizationscanresultdata="[object Object]"
        />
      </mock-themecustomizer>
    </div>
  </div>
</DocumentFragment>
`;

exports[`AdhocTabStopsTestView render should return target page changed view as tab is changed 1`] = `
<DocumentFragment>
  <mock-targetpagechangedview
    displayabledata="[object Object]"
    visualizationtype="-1"
  />
</DocumentFragment>
`;
