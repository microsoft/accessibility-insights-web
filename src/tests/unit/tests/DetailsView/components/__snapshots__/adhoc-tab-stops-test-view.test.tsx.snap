// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdhocTabStopsTestView render handles guidance 1`] = `
<DocumentFragment>
  <div
    class="tabStopsTestViewContainer"
  >
    <div
      class="tabStopsTestView"
    >
      <mock-headingwithcontentlink
        deps="stub-deps"
        guidance="stub-guidance"
        headingtitle="test title"
        headingtitleclassname="tabStopsTestViewHeader"
        secondarytext=" Step 0 of 3 "
      />
      <p>
        <em>
          Note: this test requires you to use a keyboard and to visually identify interactive elements.
        </em>
      </p>
      <mock-styledtogglebase
        checked="true"
        classname="visualHelperToggle"
        id="tab-stops-visual-helper"
        label="Visual helper"
      />
      <mock-collapsiblecomponent
        content="[object Object]"
        contentclassname="requirementInstructions"
        header="[object Object]"
      />
      <h2
        class="requirementTableTitle"
      >
        Record your results
      </h2>
      <mock-themecustomizer
        themefamily="fast-pass"
        userconfigurationstoredata="stub-user-configuration-store-data"
      >
        <mock-tabstopsrequirementstable
          deps="stub-deps"
        />
        <mock-tabstopsfailedinstancesection
          alwaysrendersection="false"
          deps="stub-deps"
          sectionheadinglevel="2"
        />
        <mock-tabstopsfailedinstancepanel
          deps="stub-deps"
          failureinstancestate="[object Object]"
        />
        <mock-focuscomponent
          deps="stub-deps"
          tabbingenabled="true"
        />
        <mock-autodetectedfailuresdialog
          deps="stub-deps"
          userconfigurationstoredata="stub-user-configuration-store-data"
          visualizationscanresultdata="[object Object]"
        />
      </mock-themecustomizer>
    </div>
  </div>
</DocumentFragment>
`;

exports[`AdhocTabStopsTestView render handles guidance: CollapsibleComponent props 1`] = `
{
  "content": <React.Fragment>
    <p>
      The visual helper for this requirement highlights the elements in the target page that receive the input focus.
    </p>
    <ol>
      <li>
        Use your keyboard to move input focus through all the interactive elements on the page –
         
        <Emphasis>
          please traverse the entire page before returning to this window
        </Emphasis>
        :
        <ol>
          <li>
            Use 
            <Term>
              Tab
            </Term>
             and
             
            <Term>
              Shift+Tab
            </Term>
             to navigate between standalone controls.
             
          </li>
          <li>
            Use the arrow keys to navigate between the focusable elements within a composite control.
          </li>
        </ol>
      </li>
      <li>
        Record your results for each requirement:
        <ol>
          <li>
            If you find any failures, select 
            <Term>
              Fail
            </Term>
            , then add them as failure instances.
          </li>
          <li>
            Select 
            <Term>
              Pass
            </Term>
             if all instances meet the requirement.
          </li>
        </ol>
      </li>
      <li>
        <Emphasis>
          Review any auto-discovered failures to be sure they are valid.
        </Emphasis>
      </li>
    </ol>
  </React.Fragment>,
  "contentClassName": "requirementInstructions",
  "header": <span
    aria-level={2}
    className="requirementHowToTestHeader"
    role="heading"
  >
    How to test
  </span>,
}
`;

exports[`AdhocTabStopsTestView render handles no guidance 1`] = `
<DocumentFragment>
  <div
    class="tabStopsTestViewContainer"
  >
    <div
      class="tabStopsTestView"
    >
      <mock-headingwithcontentlink
        deps="stub-deps"
        headingtitle="test title"
        headingtitleclassname="tabStopsTestViewHeader"
        secondarytext=" Step 0 of 3 "
      />
      <p>
        <em>
          Note: this test requires you to use a keyboard and to visually identify interactive elements.
        </em>
      </p>
      <mock-styledtogglebase
        checked="true"
        classname="visualHelperToggle"
        id="tab-stops-visual-helper"
        label="Visual helper"
      />
      <mock-collapsiblecomponent
        content="[object Object]"
        contentclassname="requirementInstructions"
        header="[object Object]"
      />
      <h2
        class="requirementTableTitle"
      >
        Record your results
      </h2>
      <mock-themecustomizer
        themefamily="fast-pass"
        userconfigurationstoredata="stub-user-configuration-store-data"
      >
        <mock-tabstopsrequirementstable
          deps="stub-deps"
        />
        <mock-tabstopsfailedinstancesection
          alwaysrendersection="false"
          deps="stub-deps"
          sectionheadinglevel="2"
        />
        <mock-tabstopsfailedinstancepanel
          deps="stub-deps"
          failureinstancestate="[object Object]"
        />
        <mock-focuscomponent
          deps="stub-deps"
          tabbingenabled="true"
        />
        <mock-autodetectedfailuresdialog
          deps="stub-deps"
          userconfigurationstoredata="stub-user-configuration-store-data"
          visualizationscanresultdata="[object Object]"
        />
      </mock-themecustomizer>
    </div>
  </div>
</DocumentFragment>
`;

exports[`AdhocTabStopsTestView render handles no guidance: CollapsibleComponent props 1`] = `
{
  "content": <React.Fragment>
    <p>
      The visual helper for this requirement highlights the elements in the target page that receive the input focus.
    </p>
    <ol>
      <li>
        Use your keyboard to move input focus through all the interactive elements on the page –
         
        <Emphasis>
          please traverse the entire page before returning to this window
        </Emphasis>
        :
        <ol>
          <li>
            Use 
            <Term>
              Tab
            </Term>
             and
             
            <Term>
              Shift+Tab
            </Term>
             to navigate between standalone controls.
             
          </li>
          <li>
            Use the arrow keys to navigate between the focusable elements within a composite control.
          </li>
        </ol>
      </li>
      <li>
        Record your results for each requirement:
        <ol>
          <li>
            If you find any failures, select 
            <Term>
              Fail
            </Term>
            , then add them as failure instances.
          </li>
          <li>
            Select 
            <Term>
              Pass
            </Term>
             if all instances meet the requirement.
          </li>
        </ol>
      </li>
      <li>
        <Emphasis>
          Review any auto-discovered failures to be sure they are valid.
        </Emphasis>
      </li>
    </ol>
  </React.Fragment>,
  "contentClassName": "requirementInstructions",
  "header": <span
    aria-level={2}
    className="requirementHowToTestHeader"
    role="heading"
  >
    How to test
  </span>,
}
`;

exports[`AdhocTabStopsTestView render should return target page changed view as tab is changed 1`] = `
<DocumentFragment>
  <mock-targetpagechangedview
    displayabledata="[object Object]"
    visualizationtype="-1"
  />
</DocumentFragment>
`;
