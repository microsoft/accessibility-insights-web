# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
trigger: # trigger only affects CI builds
    branches:
        include:
            - main

pr: # pr does not trigger CI builds
    branches:
        include:
            - '*' # must quote since "*" is a YAML reserved character; we want a string

variables:
    windowsImage: 'windows-2019'
    macImage: 'macOS-10.15'
    linuxImage: 'ubuntu-18.04'

jobs:
    - job: 'unit_tests_and_lints'

      pool:
          vmImage: $(linuxImage)

      steps:
          - template: pipeline/install-node-prerequisites.yaml

          - script: yarn lint:check:all
            displayName: check lint errors
            timeoutInMinutes: 5

          - script: yarn format:check
            displayName: check formatting errors
            timeoutInMinutes: 5

          - script: yarn copyright:check
            displayName: check copyrightheaders
            timeoutInMinutes: 1

          - script: yarn scss:build
            displayName: generate typings for scss files
            timeoutInMinutes: 3

          - script: yarn null:check
            displayName: check for strictNullChecks violations
            timeoutInMinutes: 5

          - script: yarn test --ci
            displayName: run unit tests
            timeoutInMinutes: 25

          - task: PublishTestResults@2
            inputs:
                testResultsFiles: $(System.DefaultWorkingDirectory)/test-results/unit/junit.xml
                testRunTitle: $(Agent.JobName)
            condition: always()
            displayName: publish test results
            timeoutInMinutes: 3

          - task: PublishCodeCoverageResults@1
            inputs:
                codeCoverageTool: Cobertura
                summaryFileLocation: $(System.DefaultWorkingDirectory)/test-results/unit/coverage/cobertura-coverage.xml
                failIfCoverageEmpty: true
                # We care most about the summary information; adding the detailed files doesn't give enough extra information
                # to be worth the 1min it adds to the build.
                # Consider re-enabling this once https://github.com/Microsoft/azure-pipelines-tasks/issues/4945 is resolved.
                # reportDirectory: $(System.DefaultWorkingDirectory)/test-results/unit/coverage/lcov-report
            displayName: publish code coverage
            timeoutInMinutes: 5

          - script: yarn publish-code-coverage -t $(CODECOV_TOKEN)
            displayName: Publish code coverage to codecov
            timeoutInMinutes: 3

    - job: 'publish_build_drops'
      pool:
          vmImage: $(linuxImage)
      steps:
          - template: pipeline/install-node-prerequisites.yaml

          - task: ComponentGovernanceComponentDetection@0
            displayName: 'dependency detection (Component Governance)'
            condition: and(succeeded(), eq(variables['GenerateReleaseNoticeFile'], 'true'))
            inputs:
                detectorsFilter: Yarn
                ignoreDirectories: 'drop,dist,extension,node_modules'
                verbosity: Normal
            timeoutInMinutes: 5

          - task: msospo.ospo-extension.8d7f9abb-6896-461d-9e25-4f74ed65ddb2.notice@0
            displayName: 'generate NOTICE.html file'
            condition: and(succeeded(), eq(variables['GenerateReleaseNoticeFile'], 'true'))
            inputs:
                outputfile: '$(System.DefaultWorkingDirectory)/src/NOTICE.html'
                outputformat: html
            timeoutInMinutes: 5

          - script: yarn build:all
            displayName: build:all
            timeoutInMinutes: 10

          - task: PublishBuildArtifacts@1
            inputs:
                pathtoPublish: '$(System.DefaultWorkingDirectory)/drop'
                artifactName: 'drop'
            displayName: publish drop
            timeoutInMinutes: 5

    - job: 'e2e_report_linux'
      pool:
          vmImage: $(linuxImage)
      steps:
          - template: pipeline/install-node-prerequisites.yaml

          - script: yarn build:package:report
            displayName: build report package
            timeoutInMinutes: 5

          - script: yarn test:report:e2e --ci
            displayName: run report package e2e tests
            timeoutInMinutes: 5

          - task: PublishTestResults@2
            inputs:
                testResultsFiles: $(System.DefaultWorkingDirectory)/packages/report-e2e-tests/test-results/unit/junit.xml
                testRunTitle: $(Agent.JobName)
            condition: always()
            displayName: publish test results
            timeoutInMinutes: 3

    - job: 'e2e_web_linux'
      pool:
          vmImage: $(linuxImage)
      steps:
          - template: pipeline/install-node-prerequisites.yaml
          - template: pipeline/e2e-test-from-docker.yaml
          - template: pipeline/e2e-test-publish-results.yaml

    - job: 'e2e_unified_mac'
      pool:
          vmImage: $(macImage)
      steps:
          - template: pipeline/install-node-prerequisites.yaml
          - template: pipeline/unified/unified-e2e-test-interactive.yaml
          - template: pipeline/unified/unified-e2e-publish-results.yaml
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))

    - job: 'e2e_unified_linux'
      pool:
          vmImage: $(linuxImage)
      steps:
          - template: pipeline/install-node-prerequisites.yaml
          - template: pipeline/unified/unified-e2e-test-linux.yaml
          - template: pipeline/unified/unified-e2e-publish-results.yaml

    - job: 'e2e_unified_windows'
      pool:
          vmImage: $(windowsImage)
      steps:
          - template: pipeline/install-node-prerequisites.yaml
          - template: pipeline/unified/unified-e2e-test-interactive.yaml
          - template: pipeline/unified/unified-e2e-publish-results.yaml
      condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
